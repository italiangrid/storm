# ====================================================================================
#  StoRM Backend Configuration
# ====================================================================================
#
# This file contains StoRM Backend configuration. The file is read at startup
# of the service. Your changes will be applied when the service will be restarted.

# ============================
# SRM service parameters
# ============================

# List of accepted StoRM SRM end-points.
# srm_endpoints.1.host = storm.example
# srm_endpoints.1.port = 8444
# srm_endpoints.2.host = alias.example
# srm_endpoints.2.port = 8444

# ============================
# FE/BE DBMS parameters
# ============================

# Database connection configuration
db.hostname =
db.username = storm
db.password = storm
db.port = 3306
db.properties = serverTimezone=UTC&autoReconnect=true

# Database connection pool configuration
db.pool.size = -1
db.pool.min_idle = 10
db.pool.max_wait_millis = 5000
db.pool.test_on_borrow = true
db.pool.test_while_idle = true 

# ============================
# REST Services parameter
# ============================
rest.port = 9998
rest.max_threads = 100
rest.max_queue_size = 1000

# ============================
# Sanity Check enabled
# ============================
sanity_checks_enabled = true

# ============================
# XMLRPC Server parameter
# ============================
xmlrpc.port = 8080
xmlrpc.max_threads = 256
xmlrpc.max_queue_size = 1000

# ============================
# XMLRPC & REST security token
# ============================
security_enabled = true
security_token = secret-token

# ================================
# Disk Usage Service Configuration
# ================================
#
# Disk Usage service is used for the periodic update of the used-space of all the storage spaces that are not 
# GPFS-with-quota-enabled. Running a periodic 'du -s -b' on the top of the storage spaces root directory, the
# used-space stored into the database is updated. By default, the service is disabled.
# The initial starting delay of the service and the period can also be configured.
#
# Enable/Disable the periodic run of the service
du.enabled = false
# Enable/Disable parallel du execution
du.parallel_tasks_enabled = false
# Initial delay of service start in seconds. Default: 60s
du.initial_delay = 60
# Interval of execution of the du in seconds. Default: 86400s (24h)
du.tasks_interval = 86400


# ================================
# Advanced Properties
# ================================

# Enable/disable the automatic directory creation during srmPrepareToPut requests.
directories.enable_automatic_creation = false
# Enable/disable write permission on directory created through srmMkDir requests.
directories.enable_writeperm_on_creation = false

# Default pinLifetime in seconds used for pinning files in case of srmPrepareToPut or srmPrapareToGet requests
pinlifetime.default = 259200
# Maximum allowed value for pinLifeTime. Values beyond the max will be dropped to max value.
pinlifetime.maximum = 1814400

# Add extra slashes after the “authority” part of a TURL for FILE protocol.
extraslashes.file =
# Add extra slashes after the “authority” part of a TURL for RFIO protocol.
extraslashes.rfio =
# Add extra slashes after the “authority” part of a TURL for GSIFTP protocol.
extraslashes.gsiftp = /
# Add extra slashes after the “authority” part of a TURL for ROOT protocol.
extraslashes.root = /

# Initial delay in seconds before starting the garbage collector thread
expired_spaces_agent.delay = 10
# Garbage Collector time interval in seconds.
expired_spaces_agent.interval = 300

# Default FileSize
files.default_size = 1000000
# Default FileLifetime in seconds used for VOLATILE file in case of SRM request.
files.default_lifetime = 259200
# Default file overwrite mode to use upon srmPrepareToPut requests.
# Possible values are N (Never), A (Always), D (when files Differs).
files.default_overwrite = A
# Default File Storage Type to be used for srmPrepareToPut requests.
# Possible values are  V (Volatile), P (Permanent) and  D (Durable)      
files.default_storagetype = P   

# Crusher Scheduler worker pool base size.
requests_scheduler.core_pool_size = 10
# Crusher Schedule worker pool max size.
requests_scheduler.max_pool_size = 50
# Request queue maximum size.
requests_scheduler.queue_size = 2000
# PrepareToPut worker pool base size.
ptp_scheduler.core_pool_size = 50
# PrepareToPut worker pool max size.
ptp_scheduler.max_pool_size = 200
# PrepareToPut request queue maximum size.
ptp_scheduler.queue_size = 1000
# PrepareToGet worker pool base size.
ptg_scheduler.core_pool_size = 50
# PrepareToGet worker pool max size. 
ptg_scheduler.max_pool_size = 200
# PrepareToGet request queue maximum size.
ptg_scheduler.queue_size = 2000
# BringOnline worker pool base size.
bol_scheduler.core_pool_size = 50
# BringOnline Worker pool max size. 
bol_scheduler.max_pool_size = 200
# BringOnline request queue maximum size. 
bol_scheduler.queue_size = 2000

# Initial delay before starting to pick requests from the DB, in seconds.
requests_picker_agent.delay = 1
# Polling interval in seconds to pick up new SRM requests. 
requests_picker_agent.interval = 2
# Maximum number of requests picked up at each polling time.
requests_picker_agent.max_fetched_size = 100

# Maximum number of entries returned by an srmLs call.
# Since in case of recursive srmLs results can be in order of million,
# this prevent a server overload.
synch_ls.max_entries = 2000
# Default value for the parameter "allLevelRecursive" of the srmLS request.
synch_ls.default_all_level_recursive = false
# Default value for the parameter "numOfLevels" of the srmLS request.
synch_ls.default_num_levels = 1
# Default value for the parameter "offset" of the LS request.
synch_ls.default_offset = 0

# Enable/Disable Garbage Collector
completed_requests_agent.enabled = true
# Time interval for between two requests in garbage collection. In seconds
completed_requests_agent.interval = 600
# Initial delay before starting the requests garbage collection process, in seconds.
completed_requests_agent.delay = 10
# Number of requests removed at each run. Every run purge max 800 requests in final status 
completed_requests_agent.purge_size = 800
# Time after that the GC consider a _terminated_ request as garbage in seconds
completed_requests_agent.purge_age = 21600


# Expired-Put-Requests-Agent transits expired put requests to a final state.
# A put request is expired if pinLifetime is reached.
# Time interval between two agent executions. In seconds
inprogress_requests_agent.interval = 300
# Delay on starting agent. In seconds
inprogress_requests_agent.delay = 10
# Time in seconds to consider an in-progress ptp request as expired.
inprogress_requests_agent.ptp_expiration_time = 2592000

# Skip ACL setup for PtG requests
skip_ptg_acl_setup = false

info_quota_refresh_period = 900
http_turl_prefix =
server_pool_status_check_timeout = 20000
abort_maxloop = 10
ping_properties_filename = ping-values.properties

hearthbeat.bookkeeping_enabled = false
hearthbeat.performance_measuring_enabled = false
hearthbeat.period = 60
hearthbeat.performance_logbook_time_interval = 15
hearthbeat.performance_glance_time_interval = 15