#!/bin/sh
#
# storm-backend-server init script
#
# chkconfig: 2345 90 20
# description: The StoRM Backend server
#
#
#### BEGIN INIT INFO
# Provides:          storm-backend
# Required-Start: $local_fs $network $remote_fs mysql
# Required-Stop: $local_fs $network $remote_fs
# Should-Start: $syslog $time
# Should-Stop: $syslog
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start/stop the StoRM BackEnd server
# Description: The StoRM BackEnd server.
#
#  StoRM provides an SRM interface to any POSIX filesystem with direct file
#  access ("file:" transport protocol), but can take advantage of special
#  features of high performance parallel and cluster file systems, as GPFS
#  from IBM and Lustre from SUN.
#
### END INIT INFO
#
# set -x


# Source lsb init functions
if [ ! -e /lib/lsb/init-functions ]; then
  echo "This init script requires lsb init functions!"
  exit 1
else
  source "/lib/lsb/init-functions"
fi

# This service name
prog="storm-backend-server"

# This service configuration
config="/etc/sysconfig/${prog}"

# The lockfile
lockfile="/var/lock/subsys/${prog}"

# The pidfile
pidfile="/var/run/${prog}.pid"

# Delay (in seconds) for killproc
killproc_delay=5

if [ -r "${config}" ]; then
  # Auto-export variables
  set -a
  source "${config}"
fi

function die () {
    rc="$1"
    shift
    echo -n "${prog}: " 1>&2
    if [ $# -gt 0 ]; then
        echo "$@" 1>&2
    else
        cat 1>&2
    fi
    log_failure_msg "${prog}"
    exit $rc
}

setenv_if_not_set () {
    # a little black magic makes a script more spicy ;-)
    # Explaining the magic:
    # - receives a couple of parameters, the first represent the name of a variable, the second its value
    # - if the current value for variable is an empty string then set this variable to the provided value 
    if test -z "${!1}"; then
        eval export $1=\'"$2"\'
    fi
}

function user_exists () {
    getent passwd "$1" >/dev/null 
}

## execution environment setup

if test -e "/etc/profile.d/grid-env.sh"; then
    source /etc/profile.d/grid-env.sh
else
    echo "Warning! No grid-env.sh script found in /etc/profile.d!"
fi


# read config values override (INSTALL_ROOT is from LCG-2's site.def)
for file in \
    "$INSTALL_ROOT/etc/sysconfig/globus" \
    "$INSTALL_ROOT/etc/sysconfig/glite" \
    "$INSTALL_ROOT/etc/sysconfig/edg" \
    "$INSTALL_ROOT/etc/sysconfig/storm-backend-server" \
    ;
do
  if test -e "$file"; then
      source "$file"
  fi
done

# some Java parameters
if [ -z $JAVA_HOME ]; then
    if [ ! -z $JAVA_LOCATION ]; then
         JAVA_HOME=$JAVA_LOCATION
    else
         die 5  "Error! No JAVA_HOME neither JAVA_LOCATION available! Unable to set JAVA_HOME"
    fi
fi
  
JAVA=$JAVA_HOME/bin/java

# LCMAPS modules library
setenv_if_not_set STORM_BE_CONFIG_FILE "/etc/storm/backend-server/storm.properties"
setenv_if_not_set STORM_BE_CONFIG_REFRESH 0
setenv_if_not_set STORM_BE_CONFIGDIR "`dirname $STORM_BE_CONFIG_FILE`"
setenv_if_not_set STORM_BE_LOGDIR "/var/log/storm"
setenv_if_not_set STORM_BE_USER "storm"
setenv_if_not_set STORM_BE_JARDIR "/usr/share/java/${prog}"
setenv_if_not_set STORM_BE_JAR "${STORM_BE_JARDIR}/${prog}.jar"


#######################
## make Java classpath
#######################

classpath="${STORM_BE_JARDIR}/*"

# log4j looks for its config file in the classpath...
classpath="$classpath:$STORM_BE_CONFIGDIR"

setenv_if_not_set STORM_BE_LIBDIR "/usr/lib64/"
export LD_LIBRARY_PATH="/usr/lib64/modules":$STORM_BE_LIBDIR:$LD_LIBRARY_PATH

# LCMAPS config file
setenv_if_not_set LCMAPS_DB_FILE "$STORM_BE_CONFIGDIR/lcmaps.db"

# LCMAPS user mapping policy (defined in $LCMAPS_DB_FILE)
setenv_if_not_set LCMAPS_POLICY_NAME standard

# LCMAPS log file
setenv_if_not_set LCMAPS_LOG_FILE "$STORM_BE_LOGDIR/lcmaps.log"

# LCMAPS log verbosity: 0 minimum (default), 5 maximum
setenv_if_not_set LCMAPS_DEBUG_LEVEL 0


# Set SSL options.
if [ "$ENABLE_SSL"x == yesx ]; 
    then
    if [ -z "$SSL_TRUST_STORE_PWD" -o -z "$SSL_KEY_STORE_PWD" ]; then
        die 6 "The SSL Keystore and Truststore need to be protected by password!"
    fi
    setenv_if_not_set SSL_TRUST_STORE "$STORM_BE_CONFIGDIR/ecar.ts"
    setenv_if_not_set SSL_KEY_STORE "$STORM_BE_CONFIGDIR/ecar.p12"
    setenv_if_not_set SSL_KEY_STORE_TYPE "PKCS12"
    export STORM_SSL_OPTIONS="-Djavax.net.ssl.trustStore=\"$SSL_TRUST_STORE\" \
-Djavax.net.ssl.keyStore=\"$SSL_KEY_STORE\" \
-Djavax.net.ssl.keyStoreType=\"$SSL_KEY_STORE_TYPE\" \
-Djavax.net.ssl.trustStorePassword=\"$SSL_TRUST_STORE_PWD\" \
-Djavax.net.ssl.keyStorePassword=\"$SSL_KEY_STORE_PWD\" "
else
    export STORM_SSL_OPTIONS=""
fi

## sanity checks

if ! test -d "$STORM_BE_LIBDIR"; then
    die 5 "Cannot find directory '$STORM_BE_LIBDIR' - please set environment variable STORM_HOME or STORM_BE_LIBDIR and run '$0 $@' again."
fi
if ! test -e "$STORM_BE_JAR"; then
    die 5 "Cannot find '`basename $STORM_BE_JAR`' in '$STORM_BE_LIBDIR' - please set environment variable STORM_HOME or STORM_BE_LIBDIR and run '$0 $@' again."
fi
if ! test -d "$STORM_BE_JARDIR"; then
    die 5 "Cannot find third-party .jar files directory '$STORM_BE_JARDIR' - please set environment variable STORM_HOME or STORM_BE_JARDIR and run '$0 $@' again."
fi
if ! test -e "$STORM_BE_CONFIG_FILE"; then
    die 6 "Cannot find configuration file '$STORM_BE_CONFIG_FILE' - please set environment variable STORM_HOME or STORM_BE_CONFIG_FILE and run '$0 $@' again."
fi
if ! expr match "$STORM_BE_CONFIG_REFRESH" '[0-9][0-9]*' >&/dev/null; 
then
    die 6 "Environment variable STORM_BE_CONFIG_REFRESH value is not an integer: 'STORM_BE_CONFIG_REFRESH=$STORM_BE_CONFIG_REFRESH' - please set it appropriately and run '$0 $@' again."
fi
if ! test -d "$STORM_BE_LOGDIR"; then
    die 5 "Cannot find log files directory '$STORM_BE_LOGDIR' - please set environment variable STORM_BE_LOGDIR and run '$0 $@' again."
fi
if ! test -e "$LCMAPS_DB_FILE"; then
    die 6 "Cannot find LCMAPS configuration file '$LCMAPS_DB_FILE' - please set environment variable LCMAPS_DB_FILE and run '$0 $@' again."
fi
if ! user_exists "$STORM_BE_USER"; then
    die 1 "User '$STORM_BE_USER' not found in system database; cannot run storm-backend-server process - please set environment variable STORM_BE_USER to a sane value."
fi

#TODO dont do this here, do it in yaim!
if ! su "$STORM_BE_USER" -s /bin/sh -c "test -w '$STORM_BE_LOGDIR'"; then
    chown -R $STORM_BE_USER:$STORM_BE_USER $STORM_BE_LOGDIR
#    echo 1>&2 "Log files directory '$STORM_BE_LOGDIR' is not writable by user '$STORM_BE_USER' - StoRM might not be able to *create* log files."
fi


# _current_status():
#  tests if the storm-webdav-server process is running.
#  takes care of ensuring pid and lock files are in good shape
#
#  returns 0 if the process is running.
#  returns 1 if the process is running, and the function restored pid or lock files.
#  returns 2 if the process is NOT running.
_current_status(){

  local pid=$(pgrep -f it.grid.storm.Main)
  local restored_pid_or_lock=0

  if [ -z ${pid} ]; then
    rm -f ${pidfile}
    if [ -f "${lockfile}" ]; then
      rm -f ${lockfile}
    fi
    return 2
  fi

  ## We have a running process, ensure
  ## pid and lockfiles are there
  if [ ! -f "${pidfile}" ]; then
    restored_pid_or_lock=1
    touch ${pidfile} 2>&1
    echo ${pid} > ${pidfile}
  fi

  if [ ! -f "${lockfile}" ]; then
    restored_pid_or_lock=1
    touch ${lockfile} 2>&1
  fi

  return ${restored_pid_or_lock}
}

stop () {

  echo -n $"Stopping ${prog}: "
  _current_status
  _status=$?

  if [ ${_status} -eq 2 ]; then
    echo "not running."
    return 1
  fi

  killproc -p ${pidfile} -d ${killproc_delay} ${prog}
  retval=$?
  if [ ${retval} -eq 0 ]; then
    rm -f ${lockfile}
    log_success_msg
  else
    log_failure_msg "failed to kill process."
  fi

  return ${retval}
}

start () {

  local system_opts="-Djava.library.path='$STORM_BE_LIBDIR' -Djna.library.path='$LD_LIBRARY_PATH' -Dstorm.configuration.file='$STORM_BE_CONFIG_FILE' -Dstorm.configuration.refresh='$STORM_BE_CONFIG_REFRESH'"
  local startcmd="nohup java ${STORM_BE_JVM_OPTS} -cp '$classpath' ${STORM_DEBUG_OPTION} ${STORM_JMX_OPTION} ${system_opts} it.grid.storm.Main 1>$STORM_BE_LOGDIR/storm-backend.stdout 2>$STORM_BE_LOGDIR/storm-backend.stderr &"
  echo -n $"Starting ${prog}: "

  _current_status
  _status=$?

  if [ ${_status} -eq 0 ] || [ ${_status} -eq 1 ]; then
    log_success_msg "already running."
    return 0
  fi

  start_daemon -p ${pidfile} -u ${STORM_BE_USER} ${startcmd}
  retval=$?

  if [ ${retval} -eq 0 ]; then
    sleep 5
    _current_status
    _status=$?
    if [ ${_status} -eq 0 ] || [ ${_status} -eq 1 ]; then
      log_success_msg
    else
      log_failure_msg "failed to start daemon."
      retval=1
    fi
  fi

  return $retval
}

rh_status() {

  # run checks to determine if the service is running or use generic status
  _current_status
  _status=$?
  if [ ${_status} -eq 0 ] || [ ${_status} -eq 1 ]; then
    local pid=$(cat $pidfile)
    echo "${prog} (pid $pid) is running..."
  else
    echo "${prog} is stopped."
  fi

  return ${_status}
}

restart() {
  stop
  start
}

reload() {
  restart
}

force_reload() {
  restart
}

## main

case "$1" in
  start)
    $1
    ;;
  stop)
    $1
    ;;
  restart)
    $1
    ;;
  reload)
    $1
    ;;
  force-reload)
    force_reload
    ;;
  status)
    rh_status
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|restart|reload|force-reload}"
    exit 2
esac

exit $?
